// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/Tuzi07/solvify-backend/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// AddProblem provides a mock function with given fields: problem
func (_m *Database) AddProblem(problem models.Problem) error {
	ret := _m.Called(problem)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Problem) error); ok {
		r0 = rf(problem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProblem provides a mock function with given fields: id
func (_m *Database) DeleteProblem(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProblem provides a mock function with given fields: id
func (_m *Database) GetProblem(id string) (models.Problem, error) {
	ret := _m.Called(id)

	var r0 models.Problem
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Problem, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Problem); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Problem)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProblem provides a mock function with given fields: problem
func (_m *Database) UpdateProblem(problem models.Problem) error {
	ret := _m.Called(problem)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Problem) error); ok {
		r0 = rf(problem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDatabase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabase(t mockConstructorTestingTNewDatabase) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
